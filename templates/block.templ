package templates

import (
	"github.com/ethereum/go-ethereum/core/types"
	"fmt"
	"math/big"
	"strconv"
	"time"
)

templ Block(block *types.Block, rewards *big.Int, gasUsed uint64, gasLimit uint64) {
	@Layout("Block Details | RPCPlorer") {
		<div class="container mx-auto px-4 py-8">
			<!-- Block Summary Card -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h1 class="text-2xl font-semibold text-gray-800 mb-4">Block #{block.Number().String()}</h1>
				<div class="mb-4">
					<div class="p-3 bg-blue-50 rounded-md flex items-center">
						<div class="mr-3 bg-blue-100 rounded-full p-2">
							<i class="fas fa-cube text-blue-500"></i>
						</div>
						<span class="text-gray-600 break-all">{ block.Hash().Hex() }</span>
						<button 
							class="ml-2 text-blue-500 hover:text-blue-700" 
							data-value={ block.Hash().Hex() }
							onclick="copyToClipboard(this)">
							<i class="fas fa-copy"></i>
						</button>
					</div>
				</div>
				
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<!-- Timestamp -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Timestamp:</div>
						<div>
							{ time.Unix(int64(block.Time()), 0).Format(time.RFC1123) }
						</div>
					</div>
					
					<!-- Transactions -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Transactions:</div>
						<div>
							<span class="text-blue-500">{ strconv.Itoa(len(block.Transactions())) } transactions</span> in this block
						</div>
					</div>
					
					<!-- Mined By -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Mined By:</div>
						<div class="flex items-center">
							<a href={ templ.SafeURL("/address/" + block.Coinbase().Hex()) } class="text-blue-500 hover:text-blue-700 break-all">
								{ block.Coinbase().Hex() }
							</a>
							<button 
								class="ml-2 text-blue-500 hover:text-blue-700" 
								data-value={ block.Coinbase().Hex() }
								onclick="copyToClipboard(this)">
								<i class="fas fa-copy"></i>
							</button>
						</div>
					</div>
					
					<!-- Block Reward -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Block Reward:</div>
						<div>
							{ fmt.Sprintf("%.8f ETH", float64(rewards.Uint64()) / 1e18) }
						</div>
					</div>
					
					<!-- Gas Used -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Gas Used:</div>
						<div>
							{ fmt.Sprintf("%d (%0.2f%%)", gasUsed, float64(gasUsed) / float64(gasLimit) * 100) }
						</div>
					</div>
					
					<!-- Gas Limit -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Gas Limit:</div>
						<div>
							{ fmt.Sprintf("%d", gasLimit) }
						</div>
					</div>
					
					<!-- Difficulty -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Difficulty:</div>
						<div>
							{ block.Difficulty().String() }
						</div>
					</div>
					
					<!-- Total Difficulty -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Total Difficulty:</div>
						<div>
							{ block.Difficulty().String() } <!-- Note: Actual total difficulty would require chain context -->
						</div>
					</div>
					
					<!-- Size -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Size:</div>
						<div>
							{ fmt.Sprintf("%d bytes", block.Size()) }
						</div>
					</div>
					
					<!-- Parent Hash -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Parent Hash:</div>
						<div class="flex items-center">
							<a href={ templ.SafeURL("/block/" + block.ParentHash().Hex()) } class="text-blue-500 hover:text-blue-700 break-all">
								{ block.ParentHash().Hex() }
							</a>
							<button 
								class="ml-2 text-blue-500 hover:text-blue-700" 
								data-value={ block.ParentHash().Hex() }
								onclick="copyToClipboard(this)">
								<i class="fas fa-copy"></i>
							</button>
						</div>
					</div>
					
					<!-- Sha3Uncles -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Sha3Uncles:</div>
						<div class="break-all">
							{ block.UncleHash().Hex() }
						</div>
					</div>
					
					<!-- Nonce -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Nonce:</div>
						<div>
							{ fmt.Sprintf("0x%x", block.Nonce()) }
						</div>
					</div>
				</div>
			</div>
			
			<!-- Transactions List -->
			<div class="bg-white rounded-lg shadow-md p-6">
				<h2 class="text-xl font-semibold text-gray-800 mb-4">Transactions</h2>
				<div class="overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Txn Hash
								</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									From
								</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									To
								</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Value
								</th>
								<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Gas Price
								</th>
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							for _, tx := range block.Transactions() {
								<tr class="hover:bg-gray-50">
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-500">
										<a href={ templ.SafeURL("/tx/" + tx.Hash().Hex()) }>
											{ shortenHash(tx.Hash().Hex()) }
										</a>
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
										<!-- We can't show 'from' without transaction receipt data -->
										<span class="text-gray-400">-</span>
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
										if tx.To() != nil {
											<a href={ templ.SafeURL("/address/" + tx.To().Hex()) } class="text-blue-500 hover:text-blue-700">
												{ shortenHash(tx.To().Hex()) }
											</a>
										} else {
											<span class="italic text-gray-500">Contract Creation</span>
										}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
										{ fmt.Sprintf("%.8f ETH", float64(tx.Value().Uint64()) / 1e18) }
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
										{ fmt.Sprintf("%.2f Gwei", float64(tx.GasPrice().Uint64()) / 1e9) }
									</td>
								</tr>
							}
							if len(block.Transactions()) == 0 {
								<tr>
									<td colspan="5" class="px-6 py-4 text-center text-gray-500">
										No transactions in this block
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
} 