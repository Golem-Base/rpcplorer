package templates

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"fmt"
	"math/big"
	"strconv"
	"time"
)

// Helper function to get transaction type name
func getTxTypeName(txType uint8) string {
	switch txType {
	case 0:
		return "Legacy"
	case 1:
		return "Access List"
	case 2:
		return "EIP-1559"
	default:
		return "Unknown"
	}
}

templ Transaction(tx *types.Transaction, receipt *types.Receipt, block *types.Block, currentGasPrice *big.Int, from common.Address) {
	@Layout("Transaction Details | RPCPlorer") {
		<div class="container mx-auto px-4 py-8">
			<!-- Transaction Summary Card -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h1 class="text-2xl font-semibold text-gray-800 mb-4">Transaction Details</h1>
				<div class="mb-4">
					<div class="p-3 bg-blue-50 rounded-md flex items-center">
						<div class="mr-3 bg-blue-100 rounded-full p-2">
							<i class="fas fa-exchange-alt text-blue-500"></i>
						</div>
						<span class="text-gray-600 break-all">{ tx.Hash().Hex() }</span>
						<button 
							class="ml-2 text-blue-500 hover:text-blue-700" 
							data-value={ tx.Hash().Hex() }
							onclick="copyToClipboard(this)">
							<i class="fas fa-copy"></i>
						</button>
					</div>
				</div>
				
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<!-- Status -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Status:</div>
						<div class="flex items-center">
							if receipt.Status == 1 {
								<span class="bg-green-100 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">Success</span>
							} else {
								<span class="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">Failed</span>
							}
						</div>
					</div>
					
					<!-- Block -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Block:</div>
						<div class="flex items-center">
							<a href={ templ.SafeURL("/block/" + block.Number().String()) } class="text-blue-500 hover:text-blue-700">{ block.Number().String() }</a>
							<span class="text-gray-500 ml-2">({ strconv.Itoa(block.Transactions().Len()) } txns)</span>
						</div>
					</div>
					
					<!-- Timestamp -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Timestamp:</div>
						<div>
							{ time.Unix(int64(block.Time()), 0).Format(time.RFC1123) }
						</div>
					</div>
					
					<!-- From -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">From:</div>
						<div class="flex items-center">
							<a href={ templ.SafeURL("/address/" + from.Hex()) } class="text-blue-500 hover:text-blue-700 break-all">
								{ from.Hex() }
							</a>
							<button 
								class="ml-2 text-blue-500 hover:text-blue-700" 
								data-value={ from.Hex() }
								onclick="copyToClipboard(this)">
								<i class="fas fa-copy"></i>
							</button>
						</div>
					</div>
					
					<!-- To -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">To:</div>
						<div class="flex items-center">
							if tx.To() != nil {
								<a href={ templ.SafeURL("/address/" + tx.To().Hex()) } class="text-blue-500 hover:text-blue-700 break-all">
									{ tx.To().Hex() }
								</a>
								<button 
									class="ml-2 text-blue-500 hover:text-blue-700" 
									data-value={ tx.To().Hex() }
									onclick="copyToClipboard(this)">
									<i class="fas fa-copy"></i>
								</button>
							} else {
								<span class="italic text-gray-500">Contract Creation</span>
							}
						</div>
					</div>
					
					<!-- Value -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Value:</div>
						<div>
							{ tx.Value().String() } ETH
						</div>
					</div>
					
					<!-- Transaction Fee -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Transaction Fee:</div>
						<div>
							{ fmt.Sprintf("%.8f", float64(receipt.GasUsed) * float64(tx.GasPrice().Uint64()) / 1e18) } ETH
						</div>
					</div>
					
					<!-- Gas Price -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Gas Price:</div>
						<div>
							{ tx.GasPrice().String() } Wei ({ fmt.Sprintf("%.2f", float64(tx.GasPrice().Uint64()) / 1e9) } Gwei)
						</div>
					</div>
					
					<!-- Gas Limit & Usage -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Gas Limit & Usage:</div>
						<div>
							{ fmt.Sprintf("%d | %d (%0.2f%%)", tx.Gas(), receipt.GasUsed, float64(receipt.GasUsed) / float64(tx.Gas()) * 100) }
						</div>
					</div>
					
					<!-- Nonce -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Nonce:</div>
						<div>
							{ fmt.Sprintf("%d", tx.Nonce()) }
						</div>
					</div>
					
					<!-- Transaction Type -->
					<div class="border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Type:</div>
						<div>
							0x{ fmt.Sprintf("%x", tx.Type()) } ({ getTxTypeName(tx.Type()) })
						</div>
					</div>
					
					<!-- Input Data -->
					<div class="col-span-1 md:col-span-2 border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Input Data:</div>
						<div class="bg-gray-50 p-3 rounded text-xs font-mono overflow-x-auto break-all">
							{ common.Bytes2Hex(tx.Data()) }
						</div>
					</div>

					<!-- Transaction Logs -->
					<div class="col-span-1 md:col-span-2 border-b pb-3">
						<div class="text-gray-500 text-sm mb-1">Transaction Logs:</div>
						if len(receipt.Logs) > 0 {
							for i, log := range receipt.Logs {
								<div class="bg-gray-50 p-4 rounded mb-3">
									<div class="flex items-center justify-between mb-2">
										<span class="text-sm font-medium text-gray-700">Log #{ strconv.Itoa(i + 1) }</span>
										<span class="text-xs text-gray-500">Address: <a href={ templ.SafeURL("/address/" + log.Address.Hex()) } class="text-blue-500 hover:text-blue-700">{ log.Address.Hex() }</a></span>
									</div>
									if len(log.Topics) > 0 {
										<div class="mb-2">
											<div class="text-xs text-gray-500 mb-1">Topics:</div>
											for _, topic := range log.Topics {
												<div class="text-xs font-mono break-all">{ topic.Hex() }</div>
											}
										</div>
									}
									if len(log.Data) > 0 {
										<div>
											<div class="text-xs text-gray-500 mb-1">Data:</div>
											<div class="text-xs font-mono break-all">{ common.Bytes2Hex(log.Data) }</div>
										</div>
									}
								</div>
							}
						} else {
							<div class="text-gray-500 text-sm">No logs for this transaction</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
} 